#!/bin/bash

# Script de d√©marrage pour le syst√®me Pharma MultiAgent
echo "üöÄ D√©marrage du syst√®me Pharma MultiAgent..."

# Configuration par d√©faut
MODE=${1:-"development"}
DETACHED=${2:-"false"}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [mode] [detached]"
    echo ""
    echo "Modes disponibles:"
    echo "  development  - Mode d√©veloppement (d√©faut)"
    echo "  production   - Mode production"
    echo ""
    echo "Options:"
    echo "  detached     - D√©marrer en arri√®re-plan"
    echo ""
    echo "Exemples:"
    echo "  $0                    # Dev mode, foreground"
    echo "  $0 production         # Prod mode, foreground"
    echo "  $0 development detached  # Dev mode, background"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    if [ ! -f .env ]; then
        echo "‚ùå Fichier .env manquant"
        echo "üí° Ex√©cutez d'abord: ./scripts/setup.sh"
        exit 1
    fi
    
    if [ ! -d backend/logs ]; then
        echo "‚ö†Ô∏è  R√©pertoires manquants, cr√©ation automatique..."
        mkdir -p backend/logs backend/data nginx/certs
    fi
}

# D√©marrer en mode d√©veloppement
start_development() {
    echo "üîß D√©marrage en mode d√©veloppement..."
    
    export ENVIRONMENT=development
    export DEBUG=true
    
    # Construire les images si n√©cessaire
    if [ ! "$(docker images -q pharma-multiagent-backend)" ]; then
        echo "üèóÔ∏è  Construction des images Docker..."
        docker-compose build
    fi
    
    # D√©marrer les services
    if [ "$DETACHED" = "detached" ]; then
        docker-compose -f docker-compose.yml up -d
        echo "‚úÖ Services d√©marr√©s en arri√®re-plan"
        show_status
    else
        echo "‚ñ∂Ô∏è  D√©marrage en mode interactif (Ctrl+C pour arr√™ter)"
        docker-compose -f docker-compose.yml up
    fi
}

# D√©marrer en mode production
start_production() {
    echo "üè≠ D√©marrage en mode production..."
    
    export ENVIRONMENT=production
    export DEBUG=false
    
    # V√©rifier les certificats SSL
    if [ ! -f nginx/certs/cert.pem ]; then
        echo "‚ö†Ô∏è  Certificats SSL manquants, g√©n√©ration..."
        ./scripts/setup.sh ssl
    fi
    
    # Construire les images en mode production
    docker-compose build --no-cache
    
    # D√©marrer les services
    if [ "$DETACHED" = "detached" ]; then
        docker-compose up -d
        echo "‚úÖ Services de production d√©marr√©s"
        show_status
    else
        echo "‚ñ∂Ô∏è  D√©marrage en mode production (Ctrl+C pour arr√™ter)"
        docker-compose up
    fi
}

# Afficher le statut des services
show_status() {
    echo ""
    echo "üìä Statut des services:"
    echo "======================="
    docker-compose ps
    
    echo ""
    echo "üåê URLs d'acc√®s:"
    echo "==============="
    echo "Frontend:     http://localhost:3000"
    echo "Backend API:  http://localhost:8000"
    echo "Docs API:     http://localhost:8000/docs"
    echo "Ollama:       http://localhost:11434"
    echo "Redis:        localhost:6379"
    
    if [ "$MODE" = "production" ]; then
        echo "HTTPS:        https://localhost"
    fi
    
    echo ""
    echo "üìã Commandes utiles:"
    echo "==================="
    echo "Voir les logs:     docker-compose logs -f [service]"
    echo "Arr√™ter:          docker-compose down"
    echo "Red√©marrer:       docker-compose restart [service]"
    echo "Shell backend:    docker-compose exec backend bash"
    echo "Shell frontend:   docker-compose exec frontend sh"
}

# V√©rifier la sant√© des services
health_check() {
    echo "üè• V√©rification de la sant√© des services..."
    
    sleep 10  # Attendre le d√©marrage
    
    # Backend
    if curl -f http://localhost:8000/api/health &>/dev/null; then
        echo "‚úÖ Backend: OK"
    else
        echo "‚ùå Backend: KO"
    fi
    
    # Frontend
    if curl -f http://localhost:3000 &>/dev/null; then
        echo "‚úÖ Frontend: OK"
    else
        echo "‚ùå Frontend: KO"
    fi
    
    # Ollama
    if curl -f http://localhost:11434/api/tags &>/dev/null; then
        echo "‚úÖ Ollama: OK"
    else
        echo "‚ùå Ollama: KO"
    fi
    
    # Redis
    if docker-compose exec -T redis redis-cli ping &>/dev/null; then
        echo "‚úÖ Redis: OK"
    else
        echo "‚ùå Redis: KO"
    fi
}

# Script principal
main() {
    case "$MODE" in
        "development"|"dev")
            check_prerequisites
            start_development
            ;;
        "production"|"prod")
            check_prerequisites
            start_production
            ;;
        "status")
            show_status
            ;;
        "health")
            health_check
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            echo "‚ùå Mode inconnu: $MODE"
            show_help
            exit 1
            ;;
    esac
}

# Gestion des signaux
trap 'echo "üõë Arr√™t en cours..."; docker-compose down; exit 0' INT TERM

# Ex√©cuter le script principal
main