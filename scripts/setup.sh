#!/bin/bash

# Script de setup pour le syst√®me Pharma MultiAgent
echo "üöÄ Configuration du syst√®me Pharma MultiAgent..."

# V√©rifier les pr√©requis
check_requirements() {
    echo "üìã V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Python (optionnel pour dev local)
    if command -v python3 &> /dev/null; then
        echo "‚úÖ Python 3 d√©tect√©: $(python3 --version)"
    fi
    
    # V√©rifier Node.js (optionnel pour dev local)
    if command -v node &> /dev/null; then
        echo "‚úÖ Node.js d√©tect√©: $(node --version)"
    fi
    
    echo "‚úÖ Pr√©requis v√©rifi√©s"
}

# Cr√©er les r√©pertoires n√©cessaires
setup_directories() {
    echo "üìÅ Cr√©ation des r√©pertoires..."
    
    mkdir -p backend/logs
    mkdir -p backend/data
    mkdir -p nginx/certs
    mkdir -p frontend/build
    
    echo "‚úÖ R√©pertoires cr√©√©s"
}

# Configurer les variables d'environnement
setup_env() {
    echo "‚öôÔ∏è  Configuration des variables d'environnement..."
    
    if [ ! -f .env ]; then
        cp .env.example .env
        echo "üìù Fichier .env cr√©√© √† partir de .env.example"
        echo "‚ö†Ô∏è  IMPORTANT: Configurez votre cl√© API Gemini dans .env"
    else
        echo "‚úÖ Fichier .env existant trouv√©"
    fi
}

# T√©l√©charger les mod√®les Ollama
setup_ollama_models() {
    echo "ü§ñ Configuration des mod√®les Ollama..."
    
    # D√©marrer Ollama en arri√®re-plan
    docker-compose up -d ollama
    
    # Attendre que Ollama soit pr√™t
    echo "‚è≥ Attente du d√©marrage d'Ollama..."
    sleep 10
    
    # T√©l√©charger les mod√®les essentiels
    echo "‚¨áÔ∏è  T√©l√©chargement des mod√®les LLM..."
    
    docker-compose exec ollama ollama pull llama3.2:8b
    docker-compose exec ollama ollama pull mistral:7b
    
    echo "‚úÖ Mod√®les Ollama configur√©s"
}

# Initialiser la base de donn√©es
setup_database() {
    echo "üíæ Initialisation de la base de donn√©es..."
    
    # D√©marrer Redis
    docker-compose up -d redis
    
    echo "‚úÖ Base de donn√©es initialis√©e"
}

# Construire les images Docker
build_images() {
    echo "üèóÔ∏è  Construction des images Docker..."
    
    docker-compose build --no-cache
    
    echo "‚úÖ Images Docker construites"
}

# G√©n√©rer les certificats SSL (auto-sign√©s pour dev)
setup_ssl() {
    echo "üîí G√©n√©ration des certificats SSL..."
    
    if [ ! -f nginx/certs/cert.pem ]; then
        openssl req -x509 -newkey rsa:4096 -nodes \
            -keyout nginx/certs/key.pem \
            -out nginx/certs/cert.pem \
            -days 365 \
            -subj "/C=FR/ST=Paris/L=Paris/O=Pharma/CN=localhost"
        
        echo "‚úÖ Certificats SSL g√©n√©r√©s (auto-sign√©s)"
    else
        echo "‚úÖ Certificats SSL existants trouv√©s"
    fi
}

# Tester la configuration
test_setup() {
    echo "üß™ Test de la configuration..."
    
    # D√©marrer tous les services
    docker-compose up -d
    
    # Attendre que les services soient pr√™ts
    echo "‚è≥ Attente du d√©marrage des services..."
    sleep 30
    
    # Tester l'API backend
    if curl -f http://localhost:8000/api/health &> /dev/null; then
        echo "‚úÖ Backend API fonctionnel"
    else
        echo "‚ùå Backend API non accessible"
    fi
    
    # Tester le frontend
    if curl -f http://localhost:3000 &> /dev/null; then
        echo "‚úÖ Frontend accessible"
    else
        echo "‚ùå Frontend non accessible"
    fi
    
    # Tester Ollama
    if curl -f http://localhost:11434/api/tags &> /dev/null; then
        echo "‚úÖ Ollama accessible"
    else
        echo "‚ùå Ollama non accessible"
    fi
}

# Menu principal
main() {
    echo "üî¨ Pharma MultiAgent - Script de Setup"
    echo "====================================="
    
    case "${1:-full}" in
        "requirements")
            check_requirements
            ;;
        "env")
            setup_env
            ;;
        "directories")
            setup_directories
            ;;
        "ollama")
            setup_ollama_models
            ;;
        "database")
            setup_database
            ;;
        "build")
            build_images
            ;;
        "ssl")
            setup_ssl
            ;;
        "test")
            test_setup
            ;;
        "full")
            check_requirements
            setup_directories
            setup_env
            setup_ssl
            build_images
            setup_database
            setup_ollama_models
            test_setup
            echo ""
            echo "üéâ Setup termin√©!"
            echo "üåê Frontend: http://localhost:3000"
            echo "üîß Backend: http://localhost:8000"
            echo "ü§ñ Ollama: http://localhost:11434"
            echo ""
            echo "‚ö†Ô∏è  N'oubliez pas de configurer votre cl√© API Gemini dans .env"
            ;;
        "help")
            echo "Usage: $0 [command]"
            echo ""
            echo "Commands:"
            echo "  full         - Setup complet (d√©faut)"
            echo "  requirements - V√©rifier les pr√©requis"
            echo "  env          - Configurer .env"
            echo "  directories  - Cr√©er les r√©pertoires"
            echo "  ollama       - Configurer Ollama"
            echo "  database     - Initialiser la DB"
            echo "  build        - Construire les images"
            echo "  ssl          - G√©n√©rer les certificats"
            echo "  test         - Tester la configuration"
            echo "  help         - Afficher cette aide"
            ;;
        *)
            echo "‚ùå Commande inconnue: $1"
            echo "Utilisez '$0 help' pour voir les options disponibles"
            exit 1
            ;;
    esac
}

# Ex√©cuter le script
main "$@"